<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_player" xml:lang="en-US">
<title>Player Class Reference</title>
<indexterm><primary>Player</primary></indexterm>
<para>

<para>The player character, also contains plane controls. </para>
 
</para>
<para>
<computeroutput>#include &lt;Player.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Player:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_player.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_player_1ab67b08e4700e1f6e208746e67cb0f701">Player</link> (sf::Texture *, unsigned int)</para>

<para>Create player character at position and load resources for them. </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_1a4e06f8ba5175207c534abed70d383418">update</link> (sf::RenderWindow &amp;, int, float)</para>

<para>Run all the logic and controls for player. </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_1aa8baacf4fe29a618f2cf4b26327e4d5a">kill</link> () override</para>

<para>Modify variables for when player dies or respawns. </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_1a49066b4a0b345abad5a5d4a6ec640140">resetPos</link> (int zOffset=0)</para>

<para>Reset the players position to default. </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_1a16cc17c6bffa72c5898b8046dcff565b">drawHitmarker</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_player_1a06e38c0f57e67eb006c9d09779bd8f8f">isAlive</link> ()</para>

<para>Check if player is alive. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_player_1a9e9bd4067e79f190ea314cb70dcb092d">isMissileable</link> ()</para>

<para>Returns whether the horizontal missile should shoot at the player or not. </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_1a1734ea414509ec38d5c1a7e3b991a782">restartMissileTimer</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_character">Character</link>        <itemizedlist>
            <listitem><para><link linkend="_class_character_1a7e22d0af12e2c3c8cb364d22ce8cc9f2">Character</link> (sf::Texture *)</para>

<para>Create a new character who will have sprite from spritesheet. </para>
</listitem>
            <listitem><para><link linkend="_class_character_1a5e399f512bf22a9e8558a4bae1ec9555">~Character</link> () override</para>

<para>Clean up memory related to the <link linkend="_class_character">Character</link> class. </para>
</listitem>
            <listitem><para>void <link linkend="_class_character_1aafecc5bd1222bb63a2ab0ebf82c9b479">update</link> (sf::RenderWindow &amp;, float) override</para>

<para>Move the character by velocity and redraw them to the screen. </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_character_bullet">CharacterBullet</link> * &gt; &amp; <link linkend="_class_character_1a59755f2066960eeade9a67b13f646c79">getBullets</link> ()</para>

<para>Get the currently fired bullets from this character. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class_character_1abb29539c98416153a4f079ca83879cfc">getSizeIndex</link> () const</para>

<para>Get public size index of this character. </para>
</listitem>
            <listitem><para>void <link linkend="_class_character_1a6ea404b0682144a8f21d42e881cb0ce7">killBullet</link> (int)</para>

<para>Get rid of bullet by index. </para>
</listitem>
            <listitem><para>void <link linkend="_class_character_1acf35437606532f7df271dd0fd3d6800c">setPos</link> (sf::Vector3f)</para>

<para>Set position for the character itself. </para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class_entity">Entity</link>        <itemizedlist>
            <listitem><para><link linkend="_class_entity_1a980f368aa07ce358583982821533a54a">Entity</link> ()</para>

<para>Setup <link linkend="_class_entity">Entity</link> class variables. </para>
</listitem>
            <listitem><para>virtual <link linkend="_class_entity_1ac2da1e8a32161accc56f39ac52cebd86">~Entity</link> ()=0</para>

<para>Clean up memory related to <link linkend="_class_entity">Entity</link> class. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_entity_1a3ea146cebd4310647bd49a4f08940fe5">kill</link> (<link linkend="_class_animation_1a60f8fa9f33af072a23f28b8b69b42d18">Animation::Anim</link> <link linkend="__animation_8cpp_1a35d522d607d8608fbcb1be1ad18ae0b3">animation</link>=<link linkend="_class_animation_1a60f8fa9f33af072a23f28b8b69b42d18aeda8749da5be3949b39500ad8cd21892">Animation::CHARACTER_DEATH</link>)</para>

<para>Run death animation code for the killed entity. </para>
</listitem>
            <listitem><para>int <link linkend="_class_entity_1ac9ef7fc00806615984a06ca8c71b10bc">getAnimationState</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_entity_1a1783cc856808b2d78c4e46fa9c85a524">setPos</link> (sf::Vector3f pos)</para>
</listitem>
            <listitem><para>sf::Vector3f <link linkend="_class_entity_1a17d1b17b5f2c2b7c137ee7b8347358c3">getPos</link> ()</para>
</listitem>
            <listitem><para>sf::FloatRect <link linkend="_class_entity_1a9727d15d18ccb10fa72dfe15799adcdd">getBounds</link> ()</para>
</listitem>
            <listitem><para>sf::Vector2f <link linkend="_class_entity_1ad641a9c7d92d65cb688651e48029e82d">getSpritePos</link> ()</para>

<para>Get the position of the related sprite for this entity. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Protected Member Functions inherited from <link linkend="_class_character">Character</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_character_1a40ac52813d37c391b4cd6db06a8f1216">_getSizeIndex</link> (unsigned int &amp;)</para>

<para>Get the height sector that character is in. Underscore infront indicates that it is not public. 0-3 3 indicates smallest, 0 indicates biggest. </para>
</listitem>
            <listitem><para>sf::Vector3f <link linkend="_class_character_1adba5c58a1b24bff604893e28519a1f34">getVelocity</link> () const</para>

<para>Get the velocity of character. </para>
</listitem>
            <listitem><para>void <link linkend="_class_character_1a46a264779165a349a13bcb364c4106d4">setVelocity</link> (sf::Vector3f)</para>

<para>Change the velocity of this character. </para>
</listitem>
            <listitem><para>void <link linkend="_class_character_1afe32dd9baa581b7895f06c9687d073b4">setBullet</link> (sf::IntRect)</para>

<para>Change how the bullets from this character look. </para>
</listitem>
            <listitem><para>void <link linkend="_class_character_1a450a222c641925d6bda2f2c9241c220b">updateBullets</link> (sf::RenderWindow &amp;window, float)</para>

<para>Calls <link linkend="_class_character_bullet_1a5e917f7a52f3015799e1008a4fd2654b">CharacterBullet::update()</link> on each bullet &amp; deletes bullets that are not in the window. </para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_class_character">Character</link>        <itemizedlist>
            <listitem><para>const int <link linkend="_class_character_1a602309a031e6db0a570644d8f0b5d5fb">yMax</link> = 140</para>
</listitem>
            <listitem><para>const int <link linkend="_class_character_1a1750fc7b411d6fdac9ca9e6763e126f5">yMin</link> = 69</para>
</listitem>
            <listitem><para>const int <link linkend="_class_character_1a682f191a3a01f1a772cd3fa624c0b16e">xMin</link> = -160</para>
</listitem>
            <listitem><para>const int <link linkend="_class_character_1ae741b4874f8875f33f70663890315a52">xMax</link> = 0</para>
</listitem>
            <listitem><para>sf::Vector3f <link linkend="_class_character_1a12d640046cf216dd010f8e71c3466e1e">velocity</link></para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_character_bullet">CharacterBullet</link> * &gt; <link linkend="_class_character_1aff7b8bd3f067ab04cd547c0dc14e765f">bullets</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class_character_1a95e438488293a98b1a404f39e4f97aeb">sizeIndex</link></para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_entity">Entity</link>        <itemizedlist>
            <listitem><para>sf::Texture * <link linkend="_class_entity_1ac3f2dbf1633dd3080b7e2835367170bd">spriteSheet</link></para>
</listitem>
            <listitem><para>sf::Sprite * <link linkend="_class_entity_1af83f70f8107d85626fb383599cc0f7ae">sprite</link></para>
</listitem>
            <listitem><para><link linkend="_class_animation">Animation</link> <link linkend="_class_entity_1aa3c0e2d55bf2cffe2c8937ff68bf031d">animations</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_entity_1a799462330dd8c754cdada5dab432b4dc">dead</link> = false</para>
</listitem>
            <listitem><para>sf::Text <link linkend="_class_entity_1ac653cdb194e9a3d1c5ad211bf1ab23b0">debugText</link></para>
</listitem>
            <listitem><para>sf::Font <link linkend="_class_entity_1a5c8dfa06fdc253fd93eafc998a919d00">debugFont</link></para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>The player character, also contains plane controls. </para>
<para>
Definition at line <link linkend="__player_8h_source_1l00010">10</link> of file <link linkend="__player_8h_source">Player.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_player_1ab67b08e4700e1f6e208746e67cb0f701"/><section>
    <title>Player()</title>
<indexterm><primary>Player</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>Player</secondary></indexterm>
<para><computeroutput>Player::Player (sf::Texture * texture, unsigned int startPos)</computeroutput></para><para>

<para>Create player character at position and load resources for them. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>texture</entry><entry></entry>
                            </row>
                            <row>
<entry>startPos</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__player_8cpp_source_1l00010">10</link> of file <link linkend="__player_8cpp_source">Player.cpp</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_player_1a16cc17c6bffa72c5898b8046dcff565b"/><section>
    <title>drawHitmarker()</title>
<indexterm><primary>drawHitmarker</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>drawHitmarker</secondary></indexterm>
<para><computeroutput>void Player::drawHitmarker ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__player_8h_source_1l00018">18</link> of file <link linkend="__player_8h_source">Player.h</link>.</para>
</section>
<anchor xml:id="_class_player_1a06e38c0f57e67eb006c9d09779bd8f8f"/><section>
    <title>isAlive()</title>
<indexterm><primary>isAlive</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>isAlive</secondary></indexterm>
<para><computeroutput>bool Player::isAlive ( )</computeroutput></para><para>

<para>Check if player is alive. </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__player_8cpp_source_1l00186">186</link> of file <link linkend="__player_8cpp_source">Player.cpp</link>.</para>
</section>
<anchor xml:id="_class_player_1a9e9bd4067e79f190ea314cb70dcb092d"/><section>
    <title>isMissileable()</title>
<indexterm><primary>isMissileable</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>isMissileable</secondary></indexterm>
<para><computeroutput>bool Player::isMissileable ( )</computeroutput></para><para>

<para>Returns whether the horizontal missile should shoot at the player or not. </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__player_8cpp_source_1l00176">176</link> of file <link linkend="__player_8cpp_source">Player.cpp</link>.</para>
</section>
<anchor xml:id="_class_player_1aa8baacf4fe29a618f2cf4b26327e4d5a"/><section>
    <title>kill()</title>
<indexterm><primary>kill</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>kill</secondary></indexterm>
<para><computeroutput>void Player::kill ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Modify variables for when player dies or respawns. </para>
</para>
<para>
Implements <link linkend="_class_character_1a6eaf7357d3575a2281b5456abfbe1b9d">Character</link>.</para>
<para>
Definition at line <link linkend="__player_8cpp_source_1l00156">156</link> of file <link linkend="__player_8cpp_source">Player.cpp</link>.</para>
</section>
<anchor xml:id="_class_player_1a49066b4a0b345abad5a5d4a6ec640140"/><section>
    <title>resetPos()</title>
<indexterm><primary>resetPos</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>resetPos</secondary></indexterm>
<para><computeroutput>void Player::resetPos (int zOffset = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>Reset the players position to default. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>zOffset</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__player_8cpp_source_1l00166">166</link> of file <link linkend="__player_8cpp_source">Player.cpp</link>.</para>
</section>
<anchor xml:id="_class_player_1a1734ea414509ec38d5c1a7e3b991a782"/><section>
    <title>restartMissileTimer()</title>
<indexterm><primary>restartMissileTimer</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>restartMissileTimer</secondary></indexterm>
<para><computeroutput>void Player::restartMissileTimer ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__player_8h_source_1l00023">23</link> of file <link linkend="__player_8h_source">Player.h</link>.</para>
</section>
<anchor xml:id="_class_player_1a4e06f8ba5175207c534abed70d383418"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>Player</secondary></indexterm>
<indexterm><primary>Player</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void Player::update (sf::RenderWindow &amp; window, int stage, float gameSpeed)</computeroutput></para><para>

<para>Run all the logic and controls for player. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry></entry>
                            </row>
                            <row>
<entry>inSpace</entry><entry></entry>
                            </row>
                            <row>
<entry>gameSpeed</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__player_8cpp_source_1l00042">42</link> of file <link linkend="__player_8cpp_source">Player.cpp</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Zaxxon/src/Entity/Character/Player/<link linkend="__player_8h">Player.h</link>C:/Zaxxon/src/Entity/Character/Player/<link linkend="__player_8cpp">Player.cpp</link></section>
</section>
