<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__wall_8cpp_source" xml:lang="en-US">
<title>Wall.cpp</title>
<indexterm><primary>C:/Zaxxon/src/Wall/Wall.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__wall_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__wall_8h">Wall.h</link>&quot;</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00002"/>00002 
<anchor xml:id="__wall_8cpp_source_1l00003"/>00003 
<anchor xml:id="__wall_8cpp_source_1l00011"/><link linkend="_class_wall_1a5f29ba541aff9823b15a97451d78e4c6">00011</link> <link linkend="_class_wall_1a5f29ba541aff9823b15a97451d78e4c6">Wall::Wall</link>(sf::Texture*&#32;tex,&#32;sf::Vector3f&#32;pos,&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;std::vector&lt;int&gt;&#32;walls)
<anchor xml:id="__wall_8cpp_source_1l00012"/>00012 {
<anchor xml:id="__wall_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;spriteSheet&#32;=&#32;tex;
<anchor xml:id="__wall_8cpp_source_1l00014"/>00014 
<anchor xml:id="__wall_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00016"/>00016 <emphasis role="comment">&#32;&#32;&#32;&#32;KEY&#32;for&#32;Vector</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00017"/>00017 <emphasis role="comment">&#32;&#32;&#32;&#32;0&#32;=&#32;closed&#32;wall&#32;piece</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00018"/>00018 <emphasis role="comment">&#32;&#32;&#32;&#32;1&#32;=&#32;open&#32;wall&#32;piece</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00019"/>00019 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00020"/>00020 
<anchor xml:id="__wall_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)
<anchor xml:id="__wall_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;{
<anchor xml:id="__wall_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.push_back(sf::Sprite());
<anchor xml:id="__wall_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(i).setTexture(*spriteSheet);
<anchor xml:id="__wall_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(i).setPosition(
<anchor xml:id="__wall_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__util_8cpp_1a23f3b42650cf34c1fcdd903bb936818c">translateTo2d</link>(sf::Vector3f(pos.x&#32;-&#32;38&#32;*&#32;i,&#32;pos.y,&#32;pos.z)));
<anchor xml:id="__wall_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wallPositions.push_back(sf::Vector3f(pos.x&#32;-&#32;38&#32;*&#32;i,&#32;pos.y,&#32;pos.z));
<anchor xml:id="__wall_8cpp_source_1l00028"/>00028 
<anchor xml:id="__wall_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(walls.at(i)&#32;==&#32;0)
<anchor xml:id="__wall_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(i).setTextureRect(sf::IntRect(240,&#32;64,&#32;33,&#32;31));
<anchor xml:id="__wall_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(i).setTextureRect(sf::IntRect(279,&#32;64,&#32;33,&#32;31));
<anchor xml:id="__wall_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="__wall_8cpp_source_1l00034"/>00034 }
<anchor xml:id="__wall_8cpp_source_1l00035"/>00035 
<anchor xml:id="__wall_8cpp_source_1l00036"/>00036 
<anchor xml:id="__wall_8cpp_source_1l00041"/><link linkend="_class_wall_1a274edf0d5b16afba31a8618df97626af">00041</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_wall_1a274edf0d5b16afba31a8618df97626af">Wall::drawWalls</link>(sf::RenderWindow&amp;&#32;window)
<anchor xml:id="__wall_8cpp_source_1l00042"/>00042 {
<anchor xml:id="__wall_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__util_8cpp_1abb6b320c3e2bc2c09f352e041a9d57e1">getWindowViewRect</link>(window).intersects(
<anchor xml:id="__wall_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(sprites.size()&#32;-&#32;1).getGlobalBounds())&#32;&amp;&amp;
<anchor xml:id="__wall_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="__util_8cpp_1abb6b320c3e2bc2c09f352e041a9d57e1">getWindowViewRect</link>(window).intersects(sprites.at(0).getGlobalBounds()))
<anchor xml:id="__wall_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;{
<anchor xml:id="__wall_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;onScreen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__wall_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__wall_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;}
<anchor xml:id="__wall_8cpp_source_1l00050"/>00050 
<anchor xml:id="__wall_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;onScreen&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__wall_8cpp_source_1l00052"/>00052 
<anchor xml:id="__wall_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;sprites.size();&#32;i++)
<anchor xml:id="__wall_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;window.draw(sprites.at(i));
<anchor xml:id="__wall_8cpp_source_1l00055"/>00055 }
<anchor xml:id="__wall_8cpp_source_1l00056"/>00056 
<anchor xml:id="__wall_8cpp_source_1l00057"/>00057 
<anchor xml:id="__wall_8cpp_source_1l00063"/><link linkend="_class_wall_1a2f5f377219bc2e184db172a9093875d4">00063</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_wall_1a2f5f377219bc2e184db172a9093875d4">Wall::setPosition</link>(sf::Vector3f&#32;pos,&#32;<emphasis role="keywordtype">int</emphasis>&#32;piece)
<anchor xml:id="__wall_8cpp_source_1l00064"/>00064 {
<anchor xml:id="__wall_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;sprites.at(piece).setPosition(<link linkend="__util_8cpp_1a23f3b42650cf34c1fcdd903bb936818c">translateTo2d</link>(pos));
<anchor xml:id="__wall_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;wallPositions.at(piece)&#32;=&#32;pos;
<anchor xml:id="__wall_8cpp_source_1l00067"/>00067 }
<anchor xml:id="__wall_8cpp_source_1l00068"/>00068 
<anchor xml:id="__wall_8cpp_source_1l00069"/>00069 
<anchor xml:id="__wall_8cpp_source_1l00075"/><link linkend="_class_wall_1a0f4063e0408cb992f6d478308fa52656">00075</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_wall_1a0f4063e0408cb992f6d478308fa52656">Wall::setTexture</link>(<emphasis role="keywordtype">int</emphasis>&#32;piece,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tex)
<anchor xml:id="__wall_8cpp_source_1l00076"/>00076 {
<anchor xml:id="__wall_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="comment">//Closed&#32;Piece</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tex&#32;==&#32;0)
<anchor xml:id="__wall_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(piece).setTextureRect(sf::IntRect(240,&#32;64,&#32;34,&#32;32));
<anchor xml:id="__wall_8cpp_source_1l00080"/>00080 
<anchor xml:id="__wall_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;Piece</emphasis>
<anchor xml:id="__wall_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tex&#32;==&#32;1)
<anchor xml:id="__wall_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprites.at(piece).setTextureRect(sf::IntRect(278,&#32;65,&#32;34,&#32;32));
<anchor xml:id="__wall_8cpp_source_1l00084"/>00084 }
<anchor xml:id="__wall_8cpp_source_1l00085"/>00085 
<anchor xml:id="__wall_8cpp_source_1l00086"/>00086 
<anchor xml:id="__wall_8cpp_source_1l00091"/><link linkend="_class_wall_1ab2a34a04c46c9fe0a21d4235b106e8ae">00091</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_wall_1ab2a34a04c46c9fe0a21d4235b106e8ae">Wall::checkOnScreen</link>()
<anchor xml:id="__wall_8cpp_source_1l00092"/>00092 {
<anchor xml:id="__wall_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;onScreen;
<anchor xml:id="__wall_8cpp_source_1l00094"/>00094 }
<anchor xml:id="__wall_8cpp_source_1l00095"/>00095 
<anchor xml:id="__wall_8cpp_source_1l00096"/>00096 
<anchor xml:id="__wall_8cpp_source_1l00101"/><link linkend="_class_wall_1a6132a9e93316cba66ee61a78ea96040b">00101</link> std::vector&lt;sf::Vector3f&gt;&amp;&#32;<link linkend="_class_wall_1a6132a9e93316cba66ee61a78ea96040b">Wall::getWallPositions</link>()
<anchor xml:id="__wall_8cpp_source_1l00102"/>00102 {
<anchor xml:id="__wall_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wallPositions;
<anchor xml:id="__wall_8cpp_source_1l00104"/>00104 }
</programlisting></section>
